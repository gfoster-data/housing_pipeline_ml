import requests
import json
import pandas as pd
import random

def get_house_attributes(address):

    #init session
    with requests.Session() as s:

        s.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0'
        s.headers['Authority'] = 'www.zillow.com'

        #build query
        url = f"https://www.zillow.com/homes/{'-'.join(address.split(' '))}_rb/"

        succeed_flag = False
        while not succeed_flag:

            try:
                # proxy = random_proxy()
                # proxies = {
                #     'http' : "http://" + proxy,
                #     'https' : "https://" + proxy
                # }
                print('Sending request')
                r = s.get(url)
                print(f'Zillow request returned status: {r.status_code}')
                if r.status_code == 200:
                    succeed_flag = True
                else:
                    print(f'Status message: {r.reason}')

            except:
                print('proxy failed')


        #extract house parameters json from return HMTL doc
        r_json = json.loads(r.text.split('</div><script id="__NEXT_DATA__" type="application/json">')[1].split('</script>')[0])

        try:
            r_json = json.loads(r_json['props']['pageProps']['componentProps']['gdpClientCache'])
            r_json = r_json[next(iter(r_json.keys()))]['property']
        except:
            print(f"No search results were found for {address}")
            return None


        #set desired attributes for extraction
        attributes = ['streetAddress',
                      'city',
                      'state',
                      'zipcode',
                      'longitude',
                      'latitude',
                      'homeType',
                      'yearBuilt',
                      'livingArea',
                      'lotSize',
                      'hoaFee',
                      ['resoFacts', 'bathroomsFloat'],
                      ['resoFacts', 'bedrooms'],
                      ['resoFacts', 'parkingCapacity'],
                      ['resoFacts', 'hasHeating'],
                      ['resoFacts', 'hasPrivatePool']
                      ]

        #construct DataFrame with desired attributes
        df = pd.DataFrame()
        for att in attributes:
            if type(att) is list:
                df[att[1]] = [r_json[att[0]][att[1]]]
            else:
                df[att] = [r_json[att]]

        return df

def random_proxy():

    proxies = [
    '116.125.141.115:80',
    '72.10.160.173:29439',
    '67.43.227.226:30373',
    '223.135.156.183:8080',
    '157.254.53.50:80',
    '152.67.227.182:8080',
    '50.174.7.154:80',
    '50.174.7.162:80',
    '67.43.227.229:16401',
    '198.49.68.80:80',
    '83.68.136.236:80',
    '72.10.164.178:1417',
    '195.23.57.78:80',
    '67.43.227.227:11023',
    '154.94.5.241:7001',
    '50.172.75.127:80',
    '50.168.72.116:80',
    '50.217.226.41:80',
    '162.223.90.130:80',
    '50.145.24.180:80',
    '198.44.255.3:80',
    '54.38.70.138:80',
    '116.202.19.18:80',
    '50.171.122.30:80',
    '50.223.246.237:80',
    '67.43.228.250:26991',
    '50.174.145.14:80',
    '154.203.132.55:8090',
    '23.247.136.245:80',
    '50.171.187.51:80',
    '50.207.199.86:80',
    '49.245.96.145:80',
    '50.174.7.155:80',
    '190.58.248.86:80',
    '50.217.226.44:80',
    '24.205.201.186:80',
    '50.207.199.80:80',
    '51.161.56.52:80',
    '0.0.0.0:80',
    '50.122.86.118:80',
    '50.172.75.122:80',
    '50.172.75.124:80',
    '50.174.145.9:80',
    '116.203.28.43:80',
    '50.145.24.181:80',
    '50.174.145.15:80',
    '50.239.72.19:80',
    '50.174.145.11:80',
    '50.207.199.85:80',
    '50.172.75.120:80',
    '50.172.75.121:80',
    '66.191.31.158:80',
    '50.172.39.98:80',
    '50.172.75.125:80',
    '50.174.145.13:80',
    '211.128.96.206:80',
    '50.145.24.186:80',
    '50.172.75.126:80',
    '50.221.230.186:80',
    '50.172.75.123:80',
    '68.185.57.66:80',
    '93.177.67.178:80',
    '50.169.222.244:80',
    '50.144.76.218:80',
    '50.145.24.179:80',
    '50.172.75.114:80',
    '4.207.204.199:3128',
    '50.174.7.153:80',
    '50.231.104.58:80',
    '50.239.72.17:80',
    '50.174.7.156:80',
    '50.231.110.26:80',
    '50.168.72.117:80',
    '50.220.168.134:80',
    '50.218.208.10:80',
    '50.207.199.87:80',
    '50.144.76.222:80',
    '50.217.226.45:80',
    '50.171.207.89:80',
    '178.128.113.118:23128',
    '103.160.178.5:3128',
    '50.174.7.157:80',
    '154.203.132.49:8080',
    '51.250.109.156:8080',
    '50.239.72.18:80',
    '49.228.131.169:5000',
    '50.217.226.47:80',
    '50.217.226.43:80',
    '50.207.199.84:80',
    '50.174.145.8:80',
    '50.207.199.81:80',
    '35.185.196.38:3128',
    '51.89.14.70:80',
    '123.30.154.171:7777',
    '50.207.199.83:80',
    '50.217.226.40:80',
    '51.89.255.67:80',
    '50.239.72.16:80',
    '50.217.226.46:80',
    '127.0.0.7:80',
    '103.102.153.215:33128',
    '65.18.114.254:55443',
    '107.172.80.62:3128',
    '111.89.146.129:3128',
    '186.125.218.153:999',
    '45.6.224.76:999',
    '27.147.131.41:58080',
    '103.133.63.77:8181',
    '93.127.163.52:80',
    '103.102.49.26:3128',
    '217.112.80.252:80',
    '140.99.130.144:80',
    '65.108.207.6:80',
    '154.64.226.138:80',
    '62.72.29.174:80',
    '209.97.150.167:3128',
    '201.222.50.218:80',
    '157.230.89.122:18085',
    '103.127.1.130:80',
    '43.153.207.93:3128',
    '20.24.43.214:80',
    '154.208.10.126:80',
    '89.117.130.19:80',
    '190.103.177.131:80',
    '20.111.54.16:8123',
    '20.210.113.32:8123',
    '43.167.241.83:3128',
    '204.199.174.75:999',
    '168.0.239.225:8787',
    '132.255.220.17:9500',
    '103.69.106.93:8181',
    '164.163.185.204:80',
    '191.243.46.154:43241',
    '134.209.29.120:8080',
    '194.182.187.78:3128',
    '159.65.244.233:80',
    '194.67.91.153:80',
    '128.199.202.122:3128',
    '160.86.242.23:8080',
    '219.65.73.81:80',
    '185.250.45.79:8888',
    '72.10.160.174:13093',
    '43.134.32.184:3128',
    '72.10.160.170:2657',
    '149.102.130.120:80',
    '51.254.78.223:80',
    '188.120.248.28:8080',
    '191.252.113.131:80',
    '45.136.198.90:3128',
    '23.137.248.197:8888',
    '45.39.72.95:3128',
    '142.147.131.65:5965',
    '142.111.245.101:5968',
    '198.144.190.151:5998',
    '161.123.115.192:5213',
    '154.201.36.138:3128',
    '157.7.200.65:80',
    '154.39.83.100:80',
    '185.201.8.166:80',
    '97.74.87.226:80',
    '18.222.211.211:3128',
    '20.206.106.192:8123',
    '50.174.7.159:80']

    return random.choice(proxies)

if __name__ == "__main__":

    address = "3604 W Calle Lejos Glendale, AZ 85310"
    df = get_house_attributes(address)

    pass